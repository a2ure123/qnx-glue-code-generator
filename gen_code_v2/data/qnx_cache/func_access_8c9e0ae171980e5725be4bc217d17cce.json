{
  "function_name": "access",
  "url": "https://www.qnx.com/developers/docs/7.1/com.qnx.doc.neutrino.lib_ref/topic/a/access.html",
  "synopsis": "int access( const char * path,",
  "description": "",
  "headers": [
    "#include <unistd.h>"
  ],
  "parameters": [
    {
      "name": "path",
      "description": "The path to the file or directory that you want to access."
    },
    {
      "name": "amode",
      "description": "The access mode you want to check.\n  This must be either:\n\n  \nF_OK â test for file existence.\n    \n  \n\n\n  or a bitwise ORing of the following access permissions \n  to be checked, as defined in the header <unistd.h>:\n  \n\nR_OK â test for read permission.\n    \n  \nW_OK â test for write permission.\n    \n  \nX_OK â for a directory, test for search permission.  \n      Otherwise, test for execute permission."
    }
  ],
  "return_values": [
    {
      "value": "0",
      "description": "The file or directory exists and can be accessed with the specified mode."
    },
    {
      "value": "-1",
      "description": "An error occurred (errno is set)."
    }
  ],
  "examples": [
    "#include <unistd.h>\n\nint access( const char * path,\n            int amode );",
    "#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint main( int argc, char **argv )\n  {\n    if( argc!= 2 ) {\n      fprintf( stderr, \n        \"use: readable <filename>\\n\" );\n      return EXIT_FAILURE;\n    }\n\n    if( !access( argv[1], R_OK ) ) {\n      printf( \"ok to read %s\\n\", argv[1] );\n      return EXIT_SUCCESS;\n    } else {\n      perror( argv[1] );\n      return EXIT_FAILURE;\n    }\n  }"
  ],
  "full_content": "Function: access\nURL: https://www.qnx.com/developers/docs/7.1/com.qnx.doc.neutrino.lib_ref/topic/a/access.html\nSynopsis: int access( const char * path,\nHeaders: #include <unistd.h>\nParameters:\n  - path: The path to the file or directory that you want to access.\n  - amode: The access mode you want to check.\n  This must be either:\n\n  \nF_OK â test for file existence.\n    \n  \n\n\n  or a bitwise ORing of the following access permissions \n  to be checked, as defined in the header <unistd.h>:\n  \n\nR_OK â test for read permission.\n    \n  \nW_OK â test for write permission.\n    \n  \nX_OK â for a directory, test for search permission.  \n      Otherwise, test for execute permission.\nReturn Values:\n  - 0: The file or directory exists and can be accessed with the specified mode.\n  - -1: An error occurred (errno is set).\nExamples:\nExample 1:\n#include <unistd.h>\n\nint access( const char * path,\n            int amode );\nExample 2:\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n\nint main( int argc, char **argv )\n  {\n    if( argc!= 2 ) {\n      fprintf( stderr, \n        \"use: readable <filename>\\n\" );\n      return EXIT_FAILURE;\n    }\n\n    if( !access( argv[1], R_OK ) ) {\n      printf( \"ok to read %s\\n\", argv[1] );\n      return EXIT_SUCCESS;\n    } else {\n      perror( argv[1] );\n      return EXIT_FAILURE;\n    }\n  }"
}