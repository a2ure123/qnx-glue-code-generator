{
  "function_name": "aligned_alloc",
  "url": "https://www.qnx.com/developers/docs/7.1/com.qnx.doc.neutrino.lib_ref/topic/a/aligned_alloc.html",
  "synopsis": "void *aligned_alloc( size_t alignment,",
  "description": "",
  "headers": [
    "#include <malloc.h>"
  ],
  "parameters": [
    {
      "name": "alignment",
      "description": "The alignment to use for the block of memory.\n  This must be a multiple of sizeof( void *)."
    },
    {
      "name": "size",
      "description": "The size of the block to allocate, in bytes. Unlike the C11 requirement, size\n            doesn't need to be a multiple of alignment."
    }
  ],
  "return_values": [],
  "examples": [
    "#include <malloc.h>\n\nvoid *aligned_alloc( size_t alignment,\n                     size_t size );"
  ],
  "full_content": "Function: aligned_alloc\nURL: https://www.qnx.com/developers/docs/7.1/com.qnx.doc.neutrino.lib_ref/topic/a/aligned_alloc.html\nSynopsis: void *aligned_alloc( size_t alignment,\nHeaders: #include <malloc.h>\nParameters:\n  - alignment: The alignment to use for the block of memory.\n  This must be a multiple of sizeof( void *).\n  - size: The size of the block to allocate, in bytes. Unlike the C11 requirement, size\n            doesn't need to be a multiple of alignment.\nExamples:\nExample 1:\n#include <malloc.h>\n\nvoid *aligned_alloc( size_t alignment,\n                     size_t size );"
}