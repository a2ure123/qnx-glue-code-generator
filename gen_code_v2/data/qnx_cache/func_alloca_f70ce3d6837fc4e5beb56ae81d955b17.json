{
  "function_name": "alloca",
  "url": "https://www.qnx.com/developers/docs/7.1/com.qnx.doc.neutrino.lib_ref/topic/a/alloca.html",
  "synopsis": "void *alloca( size_t size );",
  "description": "",
  "headers": [
    "#include <alloca.h>"
  ],
  "parameters": [
    {
      "name": "size",
      "description": "The number of bytes of memory to allocate."
    }
  ],
  "return_values": [],
  "examples": [
    "#include <alloca.h>\n\nvoid *alloca( size_t size );",
    "#include <stdio.h>\n#include <string.h>\n#include <malloc.h>\n#include <stdlib.h>\n\nFILE *open_err_file( char *name )\n{\n    char *buffer;\n\n    /* allocate temporary buffer for file name */\n    buffer = (char *)alloca( strlen( name ) + 5 );\n\n    if( buffer ) {\n        FILE *fp;\n\n        sprintf( buffer, \"%s.err\", name );\n        fp = fopen( buffer, \"w\" );\n\n        return fp;\n    }\n\n    return (FILE *)NULL;\n}\n\nint main( void )\n{\n    FILE *fp;\n\n    fp = open_err_file( \"alloca_test\" );\n    if( fp == NULL ) {\n        printf( \"Unable to open error file\\n\" );\n    } else {\n        fprintf( fp, \"Hello from the alloca test.\\n\" );\n        fclose( fp );\n    }\n\n    return EXIT_SUCCESS;\n}"
  ],
  "full_content": "Function: alloca\nURL: https://www.qnx.com/developers/docs/7.1/com.qnx.doc.neutrino.lib_ref/topic/a/alloca.html\nSynopsis: void *alloca( size_t size );\nHeaders: #include <alloca.h>\nParameters:\n  - size: The number of bytes of memory to allocate.\nExamples:\nExample 1:\n#include <alloca.h>\n\nvoid *alloca( size_t size );\nExample 2:\n#include <stdio.h>\n#include <string.h>\n#include <malloc.h>\n#include <stdlib.h>\n\nFILE *open_err_file( char *name )\n{\n    char *buffer;\n\n    /* allocate temporary buffer for file name */\n    buffer = (char *)alloca( strlen( name ) + 5 );\n\n    if( buffer ) {\n        FILE *fp;\n\n        sprintf( buffer, \"%s.err\", name );\n        fp = fopen( buffer, \"w\" );\n\n        return fp;\n    }\n\n    return (FILE *)NULL;\n}\n\nint main( void )\n{\n    FILE *fp;\n\n    fp = open_err_file( \"alloca_test\" );\n    if( fp == NULL ) {\n        printf( \"Unable to open error file\\n\" );\n    } else {\n        fprintf( fp, \"Hello from the alloca test.\\n\" );\n        fclose( fp );\n    }\n\n    return EXIT_SUCCESS;\n}"
}