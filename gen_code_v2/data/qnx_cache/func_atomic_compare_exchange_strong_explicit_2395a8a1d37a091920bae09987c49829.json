{
  "function_name": "atomic_compare_exchange_strong_explicit",
  "url": "https://www.qnx.com/developers/docs/7.1/com.qnx.doc.neutrino.lib_ref/topic/a/atomic_compare_exchange_strong.html",
  "synopsis": "_Bool atomic_compare_exchange_strong_explicit(",
  "description": "",
  "headers": [
    "#include <stdatomic.h>"
  ],
  "parameters": [
    {
      "name": "obj",
      "description": "A pointer to the atomic object (see the\n  atomic_* types)\n  whose value you want to compare."
    },
    {
      "name": "expected",
      "description": "A pointer to the expected value for the object.\n  The “C” represents the non-atomic data type that corresponds to the atomic object."
    },
    {
      "name": "desired",
      "description": "The desired value for the object.\n  The “C” represents the non-atomic data type that corresponds to the atomic object."
    },
    {
      "name": "succ, fail",
      "description": "(atomic_compare_exchange_strong_explicit()\n  and atomic_compare_exchange_weak_explicit() only) The\n  memory_order\n  to use for the read-modify-write and load operations, respectively."
    }
  ],
  "return_values": [],
  "examples": [
    "#include <stdatomic.h>\n\n_Bool atomic_compare_exchange_strong(\n         volatile A* obj,\n         C* expected,\n         C desired );\n\n_Bool atomic_compare_exchange_strong_explicit(\n         volatile A* obj,\n         C* expected,\n         C desired,\n         memory_order succ );\n         memory_order fail );\n\n_Bool atomic_compare_exchange_weak(\n         volatile A* obj,\n         C* expected,\n         C desired );\n\n_Bool atomic_compare_exchange_weak_explicit(\n         volatile A* obj,\n         C* expected,\n         C desired,\n         memory_order succ );\n         memory_order fail );"
  ],
  "full_content": "Function: atomic_compare_exchange_strong_explicit\nURL: https://www.qnx.com/developers/docs/7.1/com.qnx.doc.neutrino.lib_ref/topic/a/atomic_compare_exchange_strong.html\nSynopsis: _Bool atomic_compare_exchange_strong_explicit(\nHeaders: #include <stdatomic.h>\nParameters:\n  - obj: A pointer to the atomic object (see the\n  atomic_* types)\n  whose value you want to compare.\n  - expected: A pointer to the expected value for the object.\n  The “C” represents the non-atomic data type that corresponds to the atomic object.\n  - desired: The desired value for the object.\n  The “C” represents the non-atomic data type that corresponds to the atomic object.\n  - succ, fail: (atomic_compare_exchange_strong_explicit()\n  and atomic_compare_exchange_weak_explicit() only) The\n  memory_order\n  to use for the read-modify-write and load operations, respectively.\nExamples:\nExample 1:\n#include <stdatomic.h>\n\n_Bool atomic_compare_exchange_strong(\n         volatile A* obj,\n         C* expected,\n         C desired );\n\n_Bool atomic_compare_exchange_strong_explicit(\n         volatile A* obj,\n         C* expected,\n         C desired,\n         memory_order succ );\n         memory_order fail );\n\n_Bool atomic_compare_exchange_weak(\n         volatile A* obj,\n         C* expected,\n         C desired );\n\n_Bool atomic_compare_exchange_weak_explicit(\n         volatile A* obj,\n         C* expected,\n         C desired,\n         memory_order succ );\n         memory_order fail );"
}